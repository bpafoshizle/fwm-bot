name: Main and Tags

on:
  push:
    # Publish main branch as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  IMAGE_NAME: egroup-bot

jobs:
  show-key-values:
    name: show values of variables
    runs-on: ubuntu-latest

    steps:
      - name: run test command
        run: |
          echo github.event_name: ${{ github.event_name }}
          echo github.ref: ${{ github.ref }}

    # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  format-and-lint:
    # Name the Job
    name: Lint code base
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      # Runs the Super-Linter action
      - name: Run Super-Linter
        uses: github/super-linter@v3
        env:
          LINTER_RULES_PATH: app
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PYTHON_BLACK_CONFIG_FILE: pyproject.toml
  
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  build-and-push:
    name: build and push
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: log into registry
        run: echo "${{ secrets.PACKAGE_TOKEN }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: build and push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          GITHUB_REF="${{ github.ref }}"

          # Change all uppercase to lowercase
          IMAGE_ID="$(echo $IMAGE_ID | tr '[:upper:]' '[:lower:]')"

          # Strip git ref prefix from version
          # shellcheck disable=SC2001
          VERSION=$(echo "$GITHUB_REF" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "$GITHUB_REF" == "refs/tags/*" ]] && VERSION="${VERSION//^v//}"

          # Use Docker `latest` tag convention
          [ "$VERSION" == main ] && VERSION=latest

          echo IMAGE_ID="$IMAGE_ID"
          echo VERSION="$VERSION"

          docker buildx build \
          --push --tag "$IMAGE_ID:$VERSION" \
          --platform linux/amd64,linux/arm64 . \
          --file Dockerfile
